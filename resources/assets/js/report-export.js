// Lightweight client-side report export utilities
// Uses pdfMake to build PDFs from HTML tables and provides simple print

import pdfMake from 'pdfmake/build/pdfmake';
import pdfFonts from 'pdfmake/build/vfs_fonts';
import ExcelJS from 'exceljs';
// Attach default virtual file system fonts (Roboto) for browser builds, safely
try {
  pdfMake.vfs = (pdfFonts && pdfFonts.pdfMake && pdfFonts.pdfMake.vfs) || pdfMake.vfs || {};
} catch (e) {
  // ignore; pdfMake may have vfs preconfigured
}

function collectTableBody(tableEl) {
  const headerCells = Array.from(tableEl.querySelectorAll('thead th'));
  const headers = headerCells.map(th => th.innerText.trim());
  const rows = Array.from(tableEl.querySelectorAll('tbody tr')).map(tr => {
    return Array.from(tr.children).map(td => td.innerText.trim());
  });
  return [headers, ...rows];
}

async function fetchJsonRows(jsonUrl) {
  try {
    const res = await fetch(jsonUrl, { headers: { 'Accept': 'application/json' } });
    if (!res.ok) throw new Error(`HTTP ${res.status}`);
    return await res.json();
  } catch (e) {
    console.error('ReportExport: JSON fetch failed', e);
    return null;
  }
}

// Helper: convert an image URL to base64 data URL for pdfMake
async function toDataUrl(url) {
  try {
    const res = await fetch(url, { cache: 'force-cache' });
    if (!res.ok) throw new Error(`HTTP ${res.status}`);
    const blob = await res.blob();
    return await new Promise(resolve => {
      const reader = new FileReader();
      reader.onloadend = () => resolve(reader.result);
      reader.readAsDataURL(blob);
    });
  } catch (e) {
    console.warn('ReportExport: logo fetch failed', e);
    return null;
  }
}

function buildDocFromColumnsRows({ title, columns, rows, orientation = 'landscape', branding = null, filename = null }) {
  const widths = columns ? columns.map(() => '*') : [];
  const body = [columns, ...rows];
  const now = new Date();
  const footerLeft = branding?.footerLeft ?? 'Generated by Katusome';
  const footerRight = branding?.footerRight ?? now.toLocaleString();
  const headerBrand = branding?.header ?? null;
  const docDefinition = {
    info: { title },
    pageSize: 'A4',
    pageOrientation: orientation,
    pageMargins: [30, 30, 30, 30],
    content: [
      headerBrand ? { text: headerBrand, style: 'brand', margin: [0, 0, 0, 2] } : null,
      { text: title, style: 'header', margin: [0, 0, 0, 10] },
      {
        table: { headerRows: 1, widths, body },
        layout: 'lightHorizontalLines'
      }
    ],
    styles: {
      brand: { fontSize: 12, bold: true, color: '#333' },
      header: { fontSize: 14, bold: true },
      tableHeader: { bold: true }
    },
    defaultStyle: { font: 'Roboto', fontSize: 9 },
    footer: function(currentPage, pageCount) {
      return {
        columns: [
          { text: `${footerLeft}`, alignment: 'left', fontSize: 8 },
          { text: `Page ${currentPage} of ${pageCount} â€¢ ${footerRight}`, alignment: 'right', fontSize: 8 }
        ],
        margin: [30, 0]
      };
    }
  };
  const safeName = filename || `${title.replace(/\s+/g, '_')}.pdf`;
  try { pdfMake.createPdf(docDefinition).download(safeName); } catch (e) { console.error('ReportExport: PDF generation failed', e); }
}

// Build Academic-style Excel using meta and summary
async function exportExcelFromTable({ tableSelector, title = 'Report', filename = null, jsonUrl = null }) {
  // Resolve columns/rows from JSON or DOM
  let columns = [];
  let rows = [];
  let meta = {};
  let summary = {};
  let effectiveTitle = title;
  if (jsonUrl) {
    const data = await fetchJsonRows(jsonUrl);
    if (data && data.columns && data.rows) {
      columns = data.columns;
      rows = data.rows;
      meta = data.meta || {};
      summary = data.summary || data.metrics || {};
      effectiveTitle = data.title || title;
    }
  }
  if (!columns.length || !rows.length) {
    const tableEl = document.querySelector(tableSelector);
    if (!tableEl) {
      console.warn('ReportExport: table not found for selector', tableSelector);
      return;
    }
    const body = collectTableBody(tableEl);
    columns = body[0] || [];
    rows = body.slice(1);
  }

  const workbook = new ExcelJS.Workbook();
  workbook.creator = meta.generatedBy || 'Katusome Attendance';
  workbook.created = new Date();
  workbook.modified = new Date();

  const sheetName = (effectiveTitle || 'Report').slice(0, 31);
  const ws = workbook.addWorksheet(sheetName, { properties: { defaultRowHeight: 18 } });

  const totalCols = Math.max(columns.length, 1);
  const mergeAcross = (rowNumber) => ws.mergeCells(rowNumber, 1, rowNumber, totalCols);
  const centerStyle = { alignment: { horizontal: 'center' } };

  // Header block
  let currentRow = 1;
  const headerInstitution = meta.institution || 'Makerere University Business School';
  ws.getCell(currentRow, 1).value = headerInstitution;
  ws.getCell(currentRow, 1).font = { bold: true, size: 14, color: { argb: 'FF333333' } };
  ws.getCell(currentRow, 1).alignment = { horizontal: 'center' };
  mergeAcross(currentRow);
  currentRow++;

  const headerSystem = meta.system || 'Katusome Attendance Management System';
  ws.getCell(currentRow, 1).value = headerSystem;
  ws.getCell(currentRow, 1).font = { size: 12, color: { argb: 'FF555555' } };
  ws.getCell(currentRow, 1).alignment = { horizontal: 'center' };
  mergeAcross(currentRow);
  currentRow++;

  if (meta.faculty) {
    ws.getCell(currentRow, 1).value = meta.faculty;
    ws.getCell(currentRow, 1).font = { size: 10, color: { argb: 'FF777777' } };
    ws.getCell(currentRow, 1).alignment = { horizontal: 'center' };
    mergeAcross(currentRow);
    currentRow++;
  }

  const headerTitle = (effectiveTitle || 'Report').toUpperCase();
  ws.getCell(currentRow, 1).value = headerTitle;
  ws.getCell(currentRow, 1).font = { bold: true, size: 13 };
  ws.getCell(currentRow, 1).alignment = { horizontal: 'center' };
  ws.getCell(currentRow, 1).fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFF3F5F7' } };
  mergeAcross(currentRow);
  currentRow++;

  const courseLineParts = [];
  if (meta.course) courseLineParts.push(`Course: ${meta.course}`);
  if (meta.group) courseLineParts.push(`Group: ${meta.group}`);
  if (courseLineParts.length) {
    ws.getCell(currentRow, 1).value = courseLineParts.join(' | ');
    ws.getCell(currentRow, 1).font = { size: 9, color: { argb: 'FF777777' } };
    mergeAcross(currentRow);
    currentRow++;
  }

  const dateLecturerParts = [];
  if (meta.dateRange) dateLecturerParts.push(`Date: ${meta.dateRange}`);
  if (meta.lecturer) dateLecturerParts.push(`Lecturer: ${meta.lecturer}`);
  if (dateLecturerParts.length) {
    ws.getCell(currentRow, 1).value = dateLecturerParts.join(' | ');
    ws.getCell(currentRow, 1).font = { size: 9, color: { argb: 'FF777777' } };
    mergeAcross(currentRow);
    currentRow++;
  }

  const genParts = [];
  if (meta.generatedOn) genParts.push(`Generated On: ${meta.generatedOn}`);
  if (meta.generatedBy) genParts.push(`Generated By: ${meta.generatedBy}`);
  if (genParts.length) {
    ws.getCell(currentRow, 1).value = genParts.join(' | ');
    ws.getCell(currentRow, 1).font = { size: 9, color: { argb: 'FF777777' } };
    mergeAcross(currentRow);
    currentRow++;
  }

  const acadParts = [];
  if (meta.academicYear) acadParts.push(`Academic Year ${meta.academicYear}`);
  if (meta.semester) acadParts.push(`Semester ${meta.semester}`);
  if (meta.reportId) acadParts.push(`Report ID: ${meta.reportId}`);
  if (acadParts.length) {
    ws.getCell(currentRow, 1).value = acadParts.join(' | ');
    ws.getCell(currentRow, 1).font = { size: 9, color: { argb: 'FF777777' } };
    mergeAcross(currentRow);
    currentRow++;
  }

  // Summary row across columns
  const summaryCells = [];
  if (summary.expected != null) summaryCells.push(`Total Expected: ${summary.expected}`);
  if (summary.present != null) summaryCells.push(`Present: ${summary.present}`);
  if (summary.late != null) summaryCells.push(`Late: ${summary.late}`);
  if (summary.absent != null) summaryCells.push(`Absent: ${summary.absent}`);
  if (summary.rate != null) summaryCells.push(`Rate: ${summary.rate}%`);
  if (summaryCells.length) {
    const row = ws.addRow(summaryCells);
    row.font = { size: 10 };
    currentRow++;
  }

  // Spacer
  currentRow++;

  // Table header row
  const headerRowIndex = currentRow;
  const headerRow = ws.addRow(columns);
  headerRow.font = { bold: true };
  headerRow.alignment = { horizontal: 'center' };
  headerRow.eachCell(cell => {
    cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FFEFEFEF' } };
    cell.border = { top: { style: 'thin', color: { argb: 'FFCCCCCC' } }, bottom: { style: 'thin', color: { argb: 'FFCCCCCC' } } };
  });

  // Data rows
  rows.forEach(r => {
    const row = ws.addRow(r);
    row.height = 18;
  });

  // Auto-fit columns width
  ws.columns = columns.map((col, idx) => {
    const values = [col, ...rows.map(r => (r[idx] != null ? String(r[idx]) : ''))];
    const maxLen = values.reduce((m, v) => Math.max(m, v.length), 0);
    return { key: `col${idx}`, width: Math.min(Math.max(10, maxLen + 2), 40) };
  });

  // Freeze panes at header row (includes academic header block)
  ws.views = [{ state: 'frozen', ySplit: headerRowIndex }];

  const safeName = filename || `${(effectiveTitle || 'Report').replace(/\s+/g, '_')}.xlsx`;
  try {
    const buffer = await workbook.xlsx.writeBuffer();
    const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = safeName;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    setTimeout(() => URL.revokeObjectURL(url), 1000);
  } catch (e) {
    console.error('ReportExport: Excel generation failed', e);
  }
}

// Build an academic-style PDF using meta and summary from JSON endpoints
async function buildAcademicDocFromJson({ title, columns, rows, meta = {}, summary = {}, orientation = 'landscape', branding = null, filename = null }) {
  const widths = columns ? columns.map(() => '*') : [];
  const now = new Date();
  const footerLeft = branding?.footerLeft ?? (meta?.exportNote || 'This report is system-generated. Unauthorized distribution is prohibited.');
  const footerRight = branding?.footerRight ?? `${now.toLocaleString()} (EAT)`;

  // Prepare logo image if available
  let logoDataUrl = null;
  if (meta.logo) logoDataUrl = await toDataUrl(meta.logo);

  // Title and header lines
  const headerStack = [];
  if (logoDataUrl || meta.institution || meta.system || meta.faculty) {
    headerStack.push({
      columns: [
        logoDataUrl ? { image: logoDataUrl, width: 48 } : { text: '', width: 48 },
        {
          stack: [
            { text: meta.institution || 'Makerere University Business School', style: 'brand' },
            { text: meta.system || 'Katusome Attendance Management System', style: 'subBrand' },
            meta.faculty ? { text: meta.faculty, style: 'subtle' } : null
          ].filter(Boolean),
          alignment: 'left'
        },
        { text: '', width: '*' }
      ],
      margin: [0, 0, 0, 6]
    });
  }
  headerStack.push({ text: (title || meta.title || 'Report').toUpperCase(), style: 'header', alignment: 'center', margin: [0, 4, 0, 4] });
  headerStack.push({ canvas: [ { type: 'line', x1: 0, y1: 0, x2: 515, y2: 0, lineWidth: 0.5 } ], margin: [0, 2, 0, 6] });

  // Context lines
  const contextLines = [];
  const courseLineParts = [];
  if (meta.course) courseLineParts.push(`Course: ${meta.course}`);
  if (meta.group) courseLineParts.push(`Group: ${meta.group}`);
  if (courseLineParts.length) contextLines.push({ text: courseLineParts.join(' | '), style: 'context' });

  const dateLecturerParts = [];
  if (meta.dateRange) dateLecturerParts.push(`Date: ${meta.dateRange}`);
  if (meta.lecturer) dateLecturerParts.push(`Lecturer: ${meta.lecturer}`);
  if (dateLecturerParts.length) contextLines.push({ text: dateLecturerParts.join(' | '), style: 'context' });

  const genParts = [];
  if (meta.generatedOn) genParts.push(`Generated On: ${meta.generatedOn}`);
  if (meta.generatedBy) genParts.push(`Generated By: ${meta.generatedBy}`);
  if (genParts.length) contextLines.push({ text: genParts.join(' | '), style: 'context' });

  const acadParts = [];
  if (meta.academicYear) acadParts.push(`Academic Year ${meta.academicYear}`);
  if (meta.semester) acadParts.push(`Semester ${meta.semester}`);
  if (meta.reportId) acadParts.push(`Report ID: ${meta.reportId}`);
  if (acadParts.length) contextLines.push({ text: acadParts.join(' | '), style: 'context' });

  // Summary metrics table (single-row values)
  const summaryRow = [];
  if (summary.expected != null) summaryRow.push({ text: `Total Expected: ${summary.expected}`, bold: true });
  if (summary.present != null) summaryRow.push({ text: `Present: ${summary.present}` });
  if (summary.late != null) summaryRow.push({ text: `Late: ${summary.late}` });
  if (summary.absent != null) summaryRow.push({ text: `Absent: ${summary.absent}` });
  if (summary.rate != null) summaryRow.push({ text: `Rate: ${summary.rate}%` });

  const content = [
    ...headerStack,
    ...contextLines,
    { canvas: [ { type: 'line', x1: 0, y1: 0, x2: 515, y2: 0, lineWidth: 0.5 } ], margin: [0, 4, 0, 6] },
    summaryRow.length ? { columns: summaryRow, margin: [0, 0, 0, 8] } : null,
    { canvas: [ { type: 'line', x1: 0, y1: 0, x2: 515, y2: 0, lineWidth: 0.5 } ], margin: [0, 4, 0, 6] },
    {
      table: { headerRows: 1, widths, body: [columns, ...rows] },
      layout: 'lightHorizontalLines'
    }
  ].filter(Boolean);

  const docDefinition = {
    info: { title: title || meta.title || 'Report' },
    pageSize: 'A4',
    pageOrientation: orientation,
    pageMargins: [30, 30, 30, 30],
    content,
    styles: {
      brand: { fontSize: 12, bold: true, color: '#333' },
      subBrand: { fontSize: 10, color: '#555' },
      subtle: { fontSize: 9, color: '#777' },
      header: { fontSize: 14, bold: true },
      context: { fontSize: 9 }
    },
    defaultStyle: { font: 'Roboto', fontSize: 9 },
    footer: function(currentPage, pageCount) {
      const contactLine = `${meta.institution || 'Makerere University Business School'} | ${meta.email || 'attendance@mubs.ac.ug'} | ${meta.website || 'https://katusome.ssendi.dev'}`;
      return {
        stack: [
          { text: contactLine, alignment: 'center', fontSize: 8 },
          {
            columns: [
              { text: `${footerLeft}`, alignment: 'left', fontSize: 7 },
              { text: `Page ${currentPage} of ${pageCount}`, alignment: 'right', fontSize: 8 }
            ]
          }
        ],
        margin: [30, 0]
      };
    }
  };

  const safeName = filename || `${(title || meta.title || 'Report').replace(/\s+/g, '_')}.pdf`;
  try { pdfMake.createPdf(docDefinition).download(safeName); } catch (e) { console.error('ReportExport: PDF generation failed', e); }
}

async function exportPdfFromTable({ tableSelector, title = 'Report', filename = null, orientation = 'landscape', branding = null, jsonUrl = null }) {
  const tableEl = document.querySelector(tableSelector);
  if (!tableEl) {
    console.warn('ReportExport: table not found for selector', tableSelector);
    return;
  }
  const body = collectTableBody(tableEl);
  if (jsonUrl) {
    const data = await fetchJsonRows(jsonUrl);
    if (data && data.columns && data.rows) {
      const meta = data.meta || {};
      const summary = data.summary || data.metrics || {};
      const effectiveTitle = data.title || title;
      return buildAcademicDocFromJson({ title: effectiveTitle, columns: data.columns, rows: data.rows, meta, summary, orientation, branding, filename });
    }
  }
  const widths = body[0] ? body[0].map(() => '*') : [];
  const now = new Date();
  const footerLeft = branding?.footerLeft ?? 'Generated by Katusome';
  const footerRight = branding?.footerRight ?? now.toLocaleString();
  const headerBrand = branding?.header ?? null;
  const docDefinition = {
    info: { title },
    pageSize: 'A4',
    pageOrientation: orientation,
    pageMargins: [30, 30, 30, 30],
    content: [
      headerBrand ? { text: headerBrand, style: 'brand', margin: [0, 0, 0, 2] } : null,
      { text: title, style: 'header', margin: [0, 0, 0, 10] },
      { table: { headerRows: 1, widths, body }, layout: 'lightHorizontalLines' }
    ],
    styles: { brand: { fontSize: 12, bold: true, color: '#333' }, header: { fontSize: 14, bold: true }, tableHeader: { bold: true } },
    defaultStyle: { font: 'Roboto', fontSize: 9 },
    footer: function(currentPage, pageCount) { return { columns: [ { text: `${footerLeft}`, alignment: 'left', fontSize: 8 }, { text: `Page ${currentPage} of ${pageCount} â€¢ ${footerRight}`, alignment: 'right', fontSize: 8 } ], margin: [30, 0] }; }
  };
  const safeName = filename || `${title.replace(/\s+/g, '_')}.pdf`;
  try { pdfMake.createPdf(docDefinition).download(safeName); } catch (e) { console.error('ReportExport: PDF generation failed', e); }
}

function printPage() {
  try {
    window.print();
  } catch (e) {
    console.error('ReportExport: print failed', e);
  }
}

function init() {
  if (window.__reportExportInitialized) return;
  window.__reportExportInitialized = true;
  document.addEventListener('click', function (e) {
    const pdfBtn = e.target.closest('[data-export="pdf"]');
    if (pdfBtn) {
      let selector = pdfBtn.getAttribute('data-export-target');
      const title = pdfBtn.getAttribute('data-title') || document.title || 'Report';
      const filename = pdfBtn.getAttribute('data-filename');
      const orientation = pdfBtn.getAttribute('data-orientation') || 'landscape';
      const jsonUrl = pdfBtn.getAttribute('data-json-url');
      const branding = {
        header: pdfBtn.getAttribute('data-header') || document.querySelector('.app-brand')?.textContent?.trim() || null,
        footerLeft: pdfBtn.getAttribute('data-footer-left') || 'Katusome Attendance',
        footerRight: pdfBtn.getAttribute('data-footer-right') || null
      };
      // Fallback selector: nearest table if none provided
      if (!selector) {
        const container = pdfBtn.closest('.card, .container, .content-wrapper, body');
        const nearestTable = container ? container.querySelector('table') : document.querySelector('table');
        if (nearestTable && nearestTable.id) selector = `#${nearestTable.id}`;
        else selector = 'table';
      }
      exportPdfFromTable({ tableSelector: selector, title, filename, orientation, branding, jsonUrl });
      return;
    }
    const excelBtn = e.target.closest('[data-export="excel"]');
    if (excelBtn) {
      let selector = excelBtn.getAttribute('data-export-target');
      const title = excelBtn.getAttribute('data-title') || document.title || 'Report';
      const filename = excelBtn.getAttribute('data-filename');
      const jsonUrl = excelBtn.getAttribute('data-json-url');
      // Fallback selector: nearest table if none provided
      if (!selector) {
        const container = excelBtn.closest('.card, .container, .content-wrapper, body');
        const nearestTable = container ? container.querySelector('table') : document.querySelector('table');
        if (nearestTable && nearestTable.id) selector = `#${nearestTable.id}`;
        else selector = 'table';
      }
      exportExcelFromTable({ tableSelector: selector, title, filename, jsonUrl });
      return;
    }
    const printBtn = e.target.closest('[data-export="print"]');
    if (printBtn) {
      printPage();
      return;
    }
  });
}

const ReportExport = { init, exportPdfFromTable, exportExcelFromTable, printPage };
window.ReportExport = ReportExport;

// Initialize immediately if DOM is already loaded; else wait for DOMContentLoaded
try {
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => { try { ReportExport.init(); } catch (e) {} });
  } else {
    ReportExport.init();
  }
} catch (e) {}